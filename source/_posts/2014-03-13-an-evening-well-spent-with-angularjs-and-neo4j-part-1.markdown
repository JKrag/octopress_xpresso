---
layout: post
title: "An evening well spent with AngularJS and Neo4j - Part 1"
date: 2014-03-13 08:40:01 +0100
comments: true
categories: angularjs, neo4j, intro
---
## Intro
This is not only my first blog-post ever, but also the account of my first ever experience with [AngularJS](http://angularjs.org/), and my first attempt at building a client on top of the [Neo4j](http://www.neo4j.org/) graph database.

I have been hearing presentations and reading about Neo4j, with great interest for about a year now. I have actively been messing around with it for a few weeks, as I now actually have some data I want to play around with.

Until now, the main focus has been on finding the best way to get my data into Neo, and that is a whole new blog-post in the making, hopefully on its way to a browser near you soon.

### Enter graph databases .... a perfect match
As you can read on my *About* page, I have a certain interest in cats, pedigrees and feline genetics.

Ever since my first encounter with the concept of graph databases, my mind immediately connected the dots. Graph databases must be the perfect match for storing genealogical/pedigree-data, and this kind of data would probably be perfect choice for exploring the strenghts of a graph db.

I will skip over the rest of the story of how I ended up with choosing Neo4j (apart from saying that it is awesome), and will relegate the stories of how I got my data and how I imported them to future blogposts.
<!-- more -->
## Cue on stage: Pedigraph
Well, you got to call the git repository something useful, right? And Pedigraph popped into my fingers and is definitely growing on me.

I had imported a sample of my data into a local Neo4J, and spent one time playing around with it through the excellent browser interface in the very recently released 2.0 version.

My long term plan is to build a nice web interface allowing access to the data in various forms and experimenting with different kinds of visualisation.

For various reasons, I decided to dive head first into AngularJS for the front end, backed by some sort of REST server that returned JSON gained from the graph DB.

At our office, some of us meet up about once in a month after work for what we call CozyCoding. Just hacking around on whatever personal project or tech we like, sometimes in cooperation with a co-worker, and often we have a little presentation as a warm-up. On this particular evening last month, my co-worker Flemming offered to give a little presentation on getting up and running with AngularJS using Bower, Grunt and Yeoman, and after seeing his little live demo, I decided to dive right in, taking advantage of having him on the sidelines to help.

My ambition was to just get some sort of page up and running, preferably with "live" data, but this obviously required a REST backend, which I haven't built yet. Then it dawned on me that, to the best of my knowledge, Neo4J has a perfectly good REST API built in, even if I knew next to nothing about it.
I know this would never be a valid path in production, but as my focus was on trying Angular, it might possibly serve perfectly well to get up and running.

## Getting started
As my co-worker had just given his short intro, I decided that the path of least resistance was to follow his lead, and chose to go with Grunt, Bower and Yeoman for the setup.I have no idea whether this is the path recommended by people "in the know", and whether the setup generated by Yeoman is ideal, but my target was to get something up and running in an evening, to have something to play with and learn from, so what gives?

### Install the tools
#### npm
My first task was to get Yeoman installed. For this purpose, I needed npm, the Node Package Manager. As I am using a Mac, and am a big fan of [Homebrew](http://brew.sh/), it was just a matter of doing:

(if you are on a mac, and don't have Homebrew, its just a single one-liner more to install)

``` console
brew install npm
```

to install `npm`, followed by:



#### yeoman
```console
npm install yo -g
```

to install yeoman globally.
#### grunt
Followng the same path,

```console
npm install grunt-cli -g
```

to install **grunt** javascript build-tool globally
and finally
#### bower
`npm install bower -g`

for the **bower** package manger.


### starting the actual project
To get up and running with Angular, I then created a local folder (and well, obviously, a git repo), called pedigraph-client.

Starting in this folder, I activated Yeoman with the short and precise incantation:

``` console
yo
```

Yo answers with:
`[?] What would you like to do? `

Choose `Install a generator`

`[?] Search NPM for generators:`

type: `angular`

`[?] Here's what I found. Install one?`

Choose: `generator-angular`


``` console
npm http GET https://registry.npmjs.org/generator-angular
I just installed your generator by running:

    npm install -g generator-angular


[?] What would you like to do? (Use arrow keys)
❯ Run the Angular generator (0.7.1)
  Run the Karma generator (0.6.0)
  Update your generators
  Install a generator
  Find some help

  Get me out of here!
```

after choosing to run the Angular generator, I got the following response, containing some initial choices for things like Sass, Twitter bootstrap and so on. I just went with the default, bells and whistles, approach, you can make your own choice.

``` console
Make sure you're in the directory you want to scaffold into.
This generator can also be run with: yo angular

     _-----_
    |       |
    |--(o)--|   .--------------------------.
   `---------´  |    Welcome to Yeoman,    |
    ( _´U`_ )   |   ladies and gentlemen!  |
    /___A___\   '__________________________'
     |  ~  |
   __'.___.'__
 ´   `  |° ´ Y `

Out of the box I include Bootstrap and some AngularJS recommended modules.

[?] Would you like to use Sass (with Compass)? Yes
[?] Would you like to include Twitter Bootstrap? Yes
[?] Would you like to use the Sass version of Twitter Bootstrap? Yes
[?] Which modules would you like to include?
❯⬢ angular-resource.js
 ⬢ angular-cookies.js
 ⬢ angular-sanitize.js
 ⬢ angular-route.js

```

(Yeh, OK, this markdown text is unfortunately loosing all the nice colours, feel free to imagine them at your own leisure, or wait till you try it yourself).

This started a whole process of downloading and installing stuff, as per my selections.

According to my notes from the evening, I received a few errors along the way, possibly due to a bad proxy-server connection, and had to top of the process by manually doing:

``` console

bower install

npm install

```

and then everything was fine.

To put things simply, this is all that was needed to get my initial setup running.

And to make things even easier,

`grunt serve`

starts a local web server and pops open your browser showing the AngularJS start page.

{% img center /images/yeoman_initial.png %}

Now is a good time to explore the created files and directories, or just dive right in and start modifying the heck out of them...

## DONE - rejoice
I think I will actually stop here, get this published and online, and get started on writing up a part 2 of this blog-post, where I actually start building something.

... so off to [part 2](/blog/2014/03/13/an-evening-well-spent-with-angularjs-and-neo4j-part-2/)
